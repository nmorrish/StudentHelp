// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentHelp.Data;

namespace StudentHelp.Migrations
{
    [DbContext(typeof(StudenthelpContext))]
    [Migration("20220510020155_initialmigration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentHelp.Models.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Assignment_Id");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Course_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("AssignmentId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("StudentHelp.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Course_Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CourseId");

                    b.HasIndex(new[] { "Name" }, "UC_CourseName")
                        .IsUnique();

                    b.ToTable("Course");
                });

            modelBuilder.Entity("StudentHelp.Models.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Student_Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("StudentHelp.Models.StudentAssignment", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Student_Id");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Assignment_Id");

                    b.Property<DateTime?>("DateSubmitted")
                        .HasColumnType("datetime");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "AssignmentId")
                        .HasName("PK_StudentAssignment");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Student_Assignment");
                });

            modelBuilder.Entity("StudentHelp.Models.StudentCourse", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Student_Id");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Course_Id");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EnrolledDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId")
                        .HasName("PK_StudentCourse");

                    b.HasIndex("CourseId");

                    b.ToTable("Student_Course");
                });

            modelBuilder.Entity("StudentHelp.Models.Assignment", b =>
                {
                    b.HasOne("StudentHelp.Models.Course", "Course")
                        .WithMany("Assignment")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Assignment_Course")
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentHelp.Models.StudentAssignment", b =>
                {
                    b.HasOne("StudentHelp.Models.Assignment", "Assignment")
                        .WithMany("StudentAssignment")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK_StudentAssignment_Assignment")
                        .IsRequired();

                    b.HasOne("StudentHelp.Models.Student", "Student")
                        .WithMany("StudentAssignment")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentAssignment_Student")
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentHelp.Models.StudentCourse", b =>
                {
                    b.HasOne("StudentHelp.Models.Course", "Course")
                        .WithMany("StudentCourse")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_StudentCourse_Course")
                        .IsRequired();

                    b.HasOne("StudentHelp.Models.Student", "Student")
                        .WithMany("StudentCourse")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentCourse_Student")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentHelp.Models.Assignment", b =>
                {
                    b.Navigation("StudentAssignment");
                });

            modelBuilder.Entity("StudentHelp.Models.Course", b =>
                {
                    b.Navigation("Assignment");

                    b.Navigation("StudentCourse");
                });

            modelBuilder.Entity("StudentHelp.Models.Student", b =>
                {
                    b.Navigation("StudentAssignment");

                    b.Navigation("StudentCourse");
                });
#pragma warning restore 612, 618
        }
    }
}
